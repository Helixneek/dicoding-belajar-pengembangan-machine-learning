# -*- coding: utf-8 -*-
"""Proyek 3 - dicoding ML course 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mkeo3YGGICBpmG8zfRzoC5bKnuAWdjS

# **Proyek 3: Image Classification and Deployment**

### Nico Marcelino
"""

# install package and upload API key
!pip install -q kaggle
from google.colab import files
files.upload()

# change permissions and make directory
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

# download and unzip file
!kaggle datasets download -d vencerlanz09/bottle-synthetic-images-dataset

!mkdir bottle-synthetic-images-dataset.zip
!unzip bottle-synthetic-images-dataset.zip -d bottle-synthetic-images-dataset
!ls bottle-synthetic-images-dataset

# import libraries
import numpy as np
import pandas as pd
from keras.layers import Dense
import matplotlib.pyplot as plt
import tensorflow as tf
import os

!pip install split-folders
import splitfolders

!rm -rf ../content/bottle-synthetic-images-dataset/Bottle Images/Bottle Images

splitfolders.ratio("../content/bottle-synthetic-images-dataset/Bottle Images/Bottle Images", 
    output="../content/bottle-synthetic-images-dataset/Bottle Images/Split Images",
    seed=1337, ratio=(.8, .2), group_prefix=None, move=False)

base_dir = '/content/bottle-synthetic-images-dataset/Bottle Images/Split Images'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

os.listdir('/content/bottle-synthetic-images-dataset/Bottle Images/Split Images/train')

os.listdir('/content/bottle-synthetic-images-dataset/Bottle Images/Split Images/val')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    rotation_range = 20,
                    horizontal_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

val_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    rotation_range = 20,
                    horizontal_flip = True,
                    vertical_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
    train_dir, # directory data train
    target_size = (150, 150),
    batch_size = 50,
    class_mode = 'categorical',
)

validation_generator = val_datagen.flow_from_directory(
    validation_dir, # directory data test
    target_size = (150, 150),
    batch_size = 50,
    class_mode = 'categorical',
)

# callback function
# cb = tf.keras.callbacks.EarlyStopping(monitor="val_loss", patience=4, min_delta=0.2, restore_best_weights=True)
class earlystop(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):

    if((logs.get('accuracy') > 0.92) and (logs.get('val_accuracy') > 0.92)):
      print("Accuracy has reached over 92%!")
      self.model.stop_training = True

callbacks = earlystop()

# membuat convolutional neural network    
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(5, activation='softmax')
])

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.keras.optimizers.Adam(),
    metrics = ['accuracy']
)

# latih model dengan model.fit
history = model.fit(
    train_generator,
    steps_per_epoch = 40, # berapa batch yg akan di-execute per epoch
    epochs = 50, # ditambah jika model belum optimal
    validation_data = validation_generator, # menampilkan accuracy tes data validasi
    validation_steps = 30, # berapa batch yg akan di-execute per epoch
    verbose = 2,
    callbacks = [callbacks]
)

# plot of accuracy
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()

# plot of loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

import pathlib

# Menyimpan model dalam format SavedModel
export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)
     
# Convert SavedModel menjadi vegs.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()
     
tflite_model_file = pathlib.Path('bottle.tflite')
tflite_model_file.write_bytes(tflite_model)