# -*- coding: utf-8 -*-
"""Proyek 2 - dicoding ML course 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sQL0bDCg7suBhwCLbIB9JsRsNMM6MdkK

# **Proyek 2: Time Series**

### Nico Marcelino

# Downloading Data
"""

# install package and upload API key
!pip install -q kaggle
from google.colab import files
files.upload()

# change permissions and make directory
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

# download and unzip file
!kaggle datasets download -d arashnic/learn-time-series-forecasting-from-gold-price

!mkdir learn-time-series-forecasting-from-gold-price.zip
!unzip learn-time-series-forecasting-from-gold-price.zip -d learn-time-series-forecasting-from-gold-price
!ls learn-time-series-forecasting-from-gold-price

"""# Preparing Dataset"""

# import libraries
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

# make dataframe
df = pd.read_csv('learn-time-series-forecasting-from-gold-price/gold_price_data.csv')
df

# get values from dataframe and making plot
dates = df['Date'].values
gold  = df['Value'].values

plt.figure(figsize=(15,5))
plt.plot(dates, gold)
plt.xlabel('Date')
plt.ylabel('Gold Value')
plt.title('Daily maximum temperature in New York', fontsize=20);

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(dates, gold, test_size=0.2, random_state=0, shuffle=False)

# making training dataset
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
        series = tf.expand_dims(series, axis=-1)
        ds = tf.data.Dataset.from_tensor_slices(series)
        ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
        ds = ds.flat_map(lambda w: w.batch(window_size + 1))
        ds = ds.shuffle(shuffle_buffer)
        ds = ds.map(lambda w: (w[:-1], w[-1:]))
        return ds.batch(batch_size).prefetch(1)

# making the model
train_set = windowed_dataset(y_train, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(y_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
      tf.keras.layers.LSTM(128, return_sequences=True),
      tf.keras.layers.LSTM(64, return_sequences=True),
      tf.keras.layers.Dropout(0.3),
      tf.keras.layers.Dense(30, activation='relu'),
      tf.keras.layers.Dense(1),
      tf.keras.layers.Lambda(lambda x: x * 400),
    ])

# counting how much MAE is wanted
threshold_mae = (df['Value'].max() - df['Value'].min()) * 10/100
threshold_mae

class myCallback(tf.keras.callbacks.Callback):
      def on_epoch_end(self, epoch, logs={}):
        if(logs.get('mae') < threshold_mae and logs.get('val_mae') < threshold_mae):
          print("\nMAE has reached <10%!")
          self.model.stop_training = True
callbacks = myCallback()

# compiling and fitting model
lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-4 * 10**5)
optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4)
epochs = 100

model.compile(loss=tf.keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])

history = model.fit(train_set, epochs=epochs, callbacks=[callbacks], validation_data=test_set)

# plot of mae
import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

# plot of loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()